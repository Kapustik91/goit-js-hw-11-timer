{"version":3,"sources":["index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","timerFace","getElementById","CountdownTimer","selector","targetDate","intervalId","setInterval","todayDate","Date","now","countTime","updateClockface","getTimeComponents","clearInterval","time","pad","Math","floor","value","String","padStart","timer","textContent","countTimer"],"mappings":";AA0FA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA1FA,IAAMA,EAAO,CACTC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,uBAC7BI,UAAWL,SAASM,eAAe,YAGjCC,EAAAA,WACoC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC7BC,KAAAA,WAAa,KACbF,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EA8E1B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aA1EiB,MAAA,WAAA,IAAA,EAAA,KACJC,KAAAA,WAAaC,YAAY,WACpBC,IAAAA,EAAYC,KAAKC,MACjBC,EAAY,EAAKN,WAAaG,GAEpCI,EADa,EAAKC,kBAAkBF,IAGhCA,GAAa,KACbG,cAAc,EAAKR,YAEnBM,EADa,EAAKC,kBAAkB,MAIzC,OA6DX,CAAA,IAAA,oBA1D0BE,MAAAA,SAAAA,GAMP,MAAA,CAAEpB,KALI,KAAKqB,IAAIC,KAAKC,MAAMH,EAAQ,QAK1BjB,MAJD,KAAKkB,IAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAI9ChB,KAHT,KAAKiB,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAGlCf,KAFf,KAAKgB,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,SAsDpE,CAAA,IAAA,MAhDYI,MAAAA,SAAAA,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SA+C7C,EAlFMlB,GAyCAmB,EAAQ,IAAInB,EAAe,CAC/BC,SAAU,WACVC,WAAY,IAAII,KAAK,iBAKvB,SAASG,EAA2C,GAA1BjB,IAAAA,EAAAA,EAAAA,KAAMG,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAM/BL,OALRD,EAAKC,KAAK4B,YAAc5B,EACxBD,EAAKI,MAAMyB,YAAczB,EACzBJ,EAAKK,KAAKwB,YAAcxB,EACxBL,EAAKM,KAAKuB,YAAcvB,EAEhBL,GAAAA,OAAAA,EAAQG,KAAAA,OAAAA,EAASC,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,GARvCsB,EAAME","file":"goit-js-hw-11-timer.fbb26597.js","sourceRoot":"..","sourcesContent":["const refs = {\n    days: document.querySelector('[data-value=\"days\"]'),\n    hours: document.querySelector('[data-value=\"hours\"]'),\n    mins: document.querySelector('[data-value=\"mins\"]'),\n    secs: document.querySelector('[data-value=\"secs\"]'),\n    timerFace: document.getElementById('timer-1')\n  }\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.intervalId = null;\n        this.selector = selector;\n        this.targetDate = targetDate;\n        \n    }\n\n    countTimer() {\n        this.intervalId = setInterval(() => {\n            const todayDate = Date.now();\n            const countTime = this.targetDate - todayDate;\n            const time = this.getTimeComponents(countTime);\n            updateClockface(time);\n\n            if (countTime <= 0) {\n                clearInterval(this.intervalId);\n                const time = this.getTimeComponents(0);\n                updateClockface(time);\n            }\n\n        }, 1000);\n    }\n    \n        getTimeComponents(time) {\n            const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n            const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n            const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n            const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n            return { days, hours, mins, secs };\n            \n        }\n\n        pad(value) {\n            return String(value).padStart(2, '0');\n        }\n\n        }\n\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 1, 2020'),\n});\n\ntimer.countTimer();\n\nfunction updateClockface({days, hours, mins, secs}) {\n      refs.days.textContent = days;\n      refs.hours.textContent = hours;\n      refs.mins.textContent = mins;\n      refs.secs.textContent = secs;  \n    \n    return `${days}:${hours}:${mins}:${secs}`;\n    \n}\n\n\n/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);"]}