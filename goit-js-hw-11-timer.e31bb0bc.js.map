{"version":3,"sources":["index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","timerFace","getElementById","CountdownTimer","selector","targetDate","intervalId","setInterval","todayDate","Date","now","countTime","time","getTimeComponents","updateClockface","clearInterval","pad","Math","floor","value","String","padStart","timer","countTimer","textContent"],"mappings":"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","file":"goit-js-hw-11-timer.e31bb0bc.js","sourceRoot":"..","sourcesContent":["const refs = {\n    days: document.querySelector('[data-value=\"days\"]'),\n    hours: document.querySelector('[data-value=\"hours\"]'),\n    mins: document.querySelector('[data-value=\"mins\"]'),\n    secs: document.querySelector('[data-value=\"secs\"]'),\n    timerFace: document.getElementById('timer-1')\n  }\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.intervalId = null;\n        this.selector = selector;\n        this.targetDate = targetDate;\n        \n    }\n\n    countTimer() {\n        this.intervalId = setInterval(() => {\n            const todayDate = Date.now();\n            const countTime = this.targetDate - todayDate;\n            const time = this.getTimeComponents(countTime);\n            updateClockface(time);\n\n            if (countTime <= 0) {\n                clearInterval(this.intervalId);\n                const time = this.getTimeComponents(0);\n                updateClockface(time);\n            }\n\n        }, 1000);\n    }\n    \n        getTimeComponents(time) {\n            const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n            const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n            const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n            const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n            return { days, hours, mins, secs };\n            \n        }\n\n        pad(value) {\n            return String(value).padStart(2, '0');\n        }\n\n        }\n\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 1, 2020'),\n});\n\ntimer.countTimer();\n\nfunction updateClockface({days, hours, mins, secs}) {\n      refs.days.textContent = days;\n      refs.hours.textContent = hours;\n      refs.mins.textContent = mins;\n      refs.secs.textContent = secs;  \n    \n    return `${days}:${hours}:${mins}:${secs}`;\n    \n}\n\n\n/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);"]}