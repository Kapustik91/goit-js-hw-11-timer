{"version":3,"sources":["index.js"],"names":["days","document","querySelector","hours","mins","secs","CountdownTimer","selector","targetDate","intervalId","setInterval","todayDate","Date","now","countTime","time","getTimeComponents","updateClockface","clearInterval","pad","Math","floor","value","String","padStart","myTimer","countTimer","textContent"],"mappings":"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","file":"src.e31bb0bc.js","sourceRoot":"../src","sourcesContent":["const days = document.querySelector('[data-value=\"days\"]');\nconst hours = document.querySelector('[data-value=\"hours\"]');\nconst mins = document.querySelector('[data-value=\"mins\"]');\nconst secs = document.querySelector('[data-value=\"secs\"]');\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.intervalId = null;\n    }\n\n    countTimer() {\n        this.intervalId = setInterval(() => {\n            const todayDate = Date.now();\n            const countTime = this.targetDate - todayDate;\n            const time = this.getTimeComponents(countTime);\n            updateClockface(time);\n\n            if (countTime <= 0) {\n                clearInterval(this.intervalId);\n                const time = this.getTimeComponents(0);\n                updateClockface(time);\n            }\n\n        }, 1000);\n    }\n    \n        getTimeComponents(time) {\n            const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n            const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n            const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n            const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n            return { days, hours, mins, secs };\n            \n        }\n\n        pad(value) {\n            return String(value).padStart(2, '0');\n        }\n\n        }\n\n\nconst myTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 1, 2020'),\n});\n\nmyTimer.countTimer();\n\nfunction updateClockface({ days, hours, mins, secs }) {\n      days.textContent = days;\n      hours.textContent = hours;\n      mins.textContent = mins;\n      secs.textContent = secs;  \n    \n    return `${days}:${hours}:${mins}:${secs}`\n    \n}\n\n\n/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);"]}