{"version":3,"sources":["index.js"],"names":["days","document","querySelector","hours","mins","secs","timer","getElementById","CountdownTimer","selector","targetDate","setInterval","todayDate","Date","now","time","getTimeComponents","stopTimer","pad","Math","floor","value","String","padStart","clearInterval","intervalId"],"mappings":";AAoEA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EApEA,IAAMA,EAAOC,SAASC,cAAc,6BAC9BC,EAAQF,SAASC,cAAc,8BAC/BE,EAAOH,SAASC,cAAc,6BAC9BG,EAAOJ,SAASC,cAAc,6BAC9BI,EAAQL,SAASM,eAAe,WAEhCC,EAAAA,WACoC,SAAA,EAAA,GAAA,IAAA,EAAA,KAAxBC,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAKzBC,EAAAA,KAAAA,aAAAA,YAAY,WACfC,IAAAA,EAAYC,KAAKC,MACjBC,EAAO,EAAKL,WAAaE,EAC/B,EAAKI,kBAAkBD,GACvB,EAAKE,UAAUF,IAChB,MATMN,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EA2D1B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,oBAjDsBK,MAAAA,SAAAA,GAMP,MAAA,CAAEf,KALI,KAAKkB,IAAIC,KAAKC,MAAML,EAAQ,QAK1BZ,MAJD,KAAKe,IAAIC,KAAKC,MAAOL,EAAQ,MAAyB,OAI9CX,KAHT,KAAKc,IAAIC,KAAKC,MAAOL,EAAQ,KAAoB,MAGlCV,KAFf,KAAKa,IAAIC,KAAKC,MAAOL,EAAQ,IAAc,SA6ChE,CAAA,IAAA,MAxCQM,MAAAA,SAAAA,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAuCzC,CAAA,IAAA,YApCcR,MAAAA,SAAAA,GACFA,EAAO,GACPS,cAAc,KAAKC,gBAkC/B,EA9DMjB,GAiCN,IAAIA,EAAe,CACjBC,SAAU,WACVC,WAAY,IAAIG,KAAK","file":"src.5e055bd6.js","sourceRoot":"../src","sourcesContent":["const days = document.querySelector('.value[data-value=\"days\"]');\nconst hours = document.querySelector('.value[data-value=\"hours\"]');\nconst mins = document.querySelector('.value[data-value=\"mins\"]');\nconst secs = document.querySelector('.value[data-value=\"secs\"]');\nconst timer = document.getElementById(\"timer-1\");\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.selector = selector;\n        this.targetDate = targetDate;\n    }\n\n    intervalId = setInterval(() => {\n        const todayDate = Date.now();\n        const time = this.targetDate - todayDate;\n        this.getTimeComponents(time);\n        this.stopTimer(time);\n    }, 1000);\n    \n    getTimeComponents(time) {\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n        return { days, hours, mins, secs };\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }\n\n    stopTimer(time) {\n        if (time < 0) {\n            clearInterval(this.intervalId);\n        }\n    }\n};\n\nnew CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Nov 1, 2020'),\n});\n\n\n/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);"]}